-- -*- tab-width: 4 indent-tabs-mode: nil -*-
/*
At present, we must create this inside the apps schema,
since my user schema, rstewar, doesn't have the 
create or replace package privilege...
*/
create or replace package autono_stmt_gen_test
is
  procedure
  invoke_gen_con_stmt_tbls(
      p_statement_cycle_nme IN VARCHAR2
    , p_customer_nbr        IN VARCHAR2
    , p_stmt_as_of_date     IN VARCHAR2
    , p_debug_flag          IN VARCHAR2  
  )
  ;
  procedure
  copy_stmt_data(
    p_send_to_cust_nbr varchar2,
    p_statement_cycle_nme varchar2,
    p_statement_date date
    )
  ;
end;
/

create or replace package body autono_stmt_gen_test
is
  -- 2020-02-25 Tue 11:58
  -- This procedure probably won't be that useful, for it's not practicable to
  -- invoke
  --   lwx_ar_invo_stmt_print.Generate_Con_Stmt
  -- separately from its enclosing context.
  -- It appears that there is a lot of "session state" which is set up by
  -- Oracle Ebsuite which the lwx_ar_invo_stmt_print package needs/assumes
  -- to be in place.  Until/unless we figure that stuff out and provide an
  -- alternative way to set that up, we won't be able to use this procedure.
  procedure
  invoke_gen_con_stmt_tbls(
      p_statement_cycle_nme IN VARCHAR2  -- REQUIRED
    --
    -- Need to supply this to keep it "narrowed":
    , p_customer_nbr        IN VARCHAR2  
    --
    -- This is best supplied as well, as the program will otherwise
    -- derive its own default:
    , p_stmt_as_of_date     IN VARCHAR2
    -- 
    , p_debug_flag          IN VARCHAR2  
  )
  is
    -- We require a mechanism to invoke the 
    --   lwx_ar_invo_stmt_print.Generate_Con_Stmt
    -- procedure, and generate some data with it, and then
    -- to save those data to the above "tst" tables 
    -- in the rstewar schema in an autonomous
    -- transaction so that the data generated by the
    -- call to
    --   lwx_ar_invo_stmt_print.Generate_Con_Stmt
    -- can be rolled back.
    --
    -- "Dummy" parameter values demanded by Oracle framework, etc:
    l_errbuf varchar2(2000);
    l_retcode number;
    --
  begin
    lwx_ar_invo_stmt_print.Generate_Con_Stmt(
        errbuf => l_errbuf
      , retcode => l_retcode
      , p_statement_cycle_nme => p_statement_cycle_nme
      , p_customer_nbr => p_customer_nbr
      , p_stmt_as_of_date => p_stmt_as_of_date
      , p_debug_flag => p_debug_flag
    );
    --
    -- First, copy the data produced by the preceding into the
    -- "tst_lwx_ar_stmt*" tables, and commit those results
    -- via an autonomous transaction:
    -- copy_stmt_data(p_customer_nbr, p_statement_cycle_nme);
    --
    -- Now, rollback the work that was done by the call to
    --   lwx_ar_invo_stmt_print.Generate_Con_Stmt
    -- in order to avoid making persistent changes to the regular
    -- application "lwx_ar_stmt*" tables:
    -- rollback; 
  end;
  --
  -- We must copy by identifying the header-record's
  -- requisite:
  --   send_to_cust_nbr ::=  a copy of the account number that was passed in, the p_customer_nbr
  --   statement_cycle_id ::=  a copy of the p_statement_cycle_nme parameter, I believe...
  --   
  procedure
  copy_stmt_data(
    p_send_to_cust_nbr varchar2,
    p_statement_cycle_nme varchar2,
    p_statement_date date
    )
  is
    pragma autonomous_transaction;
    --
    l_statement_cycle_id number;
    l_test_sequence number;
  begin
    select
      sc.statement_cycle_id
    into
      l_statement_cycle_id
    from
      ar_statement_cycles sc
    , hz_cust_accounts ac
    , hz_customer_profiles hcp
    where
        sc.name = p_statement_cycle_nme
    and sc.statement_cycle_id = hcp.statement_cycle_id
    and hcp.send_statements = 'Y'
    and ac.cust_account_id = hcp.cust_account_id
    and hcp.site_use_id is null
    and ac.account_number = p_send_to_cust_nbr
    ;
    --
    -- Retrieve the needed sequence value:
    select rstewar.stmt_tst_seq.nextval into l_test_sequence from dual;
    --
    insert into rstewar.tst_lwx_ar_stmt_line_details
    select dt.*, sysdate test_date, l_test_sequence test_sequence
    from lwx.lwx_ar_stmt_line_details dt, rstewar.v_ar_stmt_info si
    where
        si.send_to_cust_nbr = p_send_to_cust_nbr
    and si.statement_cycle_id = l_statement_cycle_id
    and dt.stmt_line_dtl_id = si.stmt_line_dtl_id
    and si.stmt_dte = p_statement_date
    ;
    dbms_output.put_line('Copied '||to_char(sql%rowcount,'tm9')||' rows into tst_lwx_ar_stmt_line_details.');
    --
    insert into rstewar.tst_lwx_ar_stmt_lines
    select sl.*, sysdate test_date, l_test_sequence test_sequence
    from lwx.lwx_ar_stmt_lines sl, rstewar.v_ar_stmt_info si
    where
        si.send_to_cust_nbr = p_send_to_cust_nbr
    and si.statement_cycle_id = l_statement_cycle_id
    and si.stmt_line_id = sl.stmt_line_id
    and si.stmt_dte = p_statement_date
    ;
    dbms_output.put_line('Copied '||to_char(sql%rowcount,'tm9')||' rows into tst_lwx_ar_stmt_lines.');
    --
    insert into rstewar.tst_lwx_ar_stmt_headers 
    select sh.*, sysdate test_date, l_test_sequence test_sequence
    from lwx.lwx_ar_stmt_headers sh, rstewar.v_ar_stmt_info si
    where
        si.send_to_cust_nbr = p_send_to_cust_nbr
    and si.statement_cycle_id = l_statement_cycle_id
    and si.stmt_hdr_id = sh.stmt_hdr_id
    and si.stmt_dte = p_statement_date
    ;
    dbms_output.put_line('Copied '||to_char(sql%rowcount,'tm9')||' rows into tst_lwx_ar_stmt_headers.');
    --
    -- the data inserted into the "tst_lwx_ar_stmt*" tables must be saved,
    -- and this happens independently of other transactions in this session:
    commit; 
  end;
  --
end autono_stmt_gen_test;
/
